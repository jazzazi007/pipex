moaljazz@c2r4s1 ~/pipex % valgrind --track-fds=yes --leak-check=full -s ./pipex.out file1 "" " " out   

moaljazz@c2r4s1 ~/pipex % valgrind --track-fds=yes --leak-check=full -s ./pipex.out file1 "" " " out   

moaljazz@c2r4s1 ~/pipex % valgrind --track-fds=yes --leak-check=full -s ./pipex.out file1 "mkdir sss" ls out

>> check out the file descriptor leak
>> check out the leaks of malloc and free
>> check out the not allowed system calls
>> check out the permission and access to the files with commands executing
>> dont forget exit status of the 2nd child process
>>>>>>>>norminatte the code
#include <sys/wait.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <errno.h>
#include <string.h>

int file_errhandle(int file)
{
    if (file < 0)
    {
        perror("Error opening file");
        fprintf(stderr, "Error: %s %d\n", strerror(errno), errno);
        return errno;
    }
    return 0;
}

void close_pipes(int *pd, pid_t id, pid_t id2)
{
    close(pd[0]);
    close(pd[1]);

    int status;
    waitpid(id, &status, 0);
    if (WIFEXITED(status))
    {
        printf("First child exited with status %d\n", WEXITSTATUS(status));
    }
    else if (WIFSIGNALED(status))
    {
        printf("First child terminated by signal %d\n", WTERMSIG(status));
    }

    waitpid(id2, &status, 0);
    if (WIFEXITED(status))
    {
        printf("Second child exited with status %d\n", WEXITSTATUS(status));
    }
    else if (WIFSIGNALED(status))
    {
        printf("Second child terminated by signal %d\n", WTERMSIG(status));
    }
}

void pipex(int infile, int outfile, char **ag, char **env)
{
    pid_t id;
    pid_t id2;
    int pd[2];

    if (pipe(pd) == -1)
    {
        perror("Error creating pipe");
        exit(EXIT_FAILURE);
    }

    id = fork();
    if (id < 0)
    {
        perror("Error forking");
        exit(EXIT_FAILURE);
    }

    if (id == 0)
    {
        if (file_errhandle(infile) == 0)
        {
            first_fork_operate(infile, ag, env, pd);
        }
        else
        {
            exit(EXIT_FAILURE);
        }
    }
    else
    {
        id2 = fork();
        if (id2 < 0)
        {
            perror("Error forking");
            exit(EXIT_FAILURE);
        }

        if (id2 == 0)
        {
            if (file_errhandle(outfile) == 0)
            {
                second_fork_operate(outfile, ag, env, pd);
            }
            else
            {
                exit(EXIT_FAILURE);
            }
        }
        close_pipes(pd, id, id2);
    }
}

int main(int ac, char **av, char **envp)
{
    int fd1;
    int fd2;

    if (ac != 5)
    {
        fprintf(stderr, "Usage: %s file1 cmd1 cmd2 file2\n", av[0]);
        return -1;
    }

    fd1 = open(av[1], O_RDONLY);
    if (file_errhandle(fd1) != 0)
    {
        return -1;
    }

    fd2 = open(av[4], O_WRONLY | O_CREAT | O_TRUNC, 0777);
    if (file_errhandle(fd2) != 0)
    {
        close(fd1);
        return -1;
    }

    pipex(fd1, fd2, av, envp);

    close(fd1);
    close(fd2);

    return 0;
}




//Relative Path handling
//infile -r  == fds-open
//outfile -w == fds-open